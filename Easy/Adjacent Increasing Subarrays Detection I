**********************************************************************************************************************
                                                       JAVA
MY SOLUTION :
class Solution {
    public boolean Str_Inc(List<Integer> chk, int i, int k)
    {
        for(int j = i; j<i+k-1; j++){
            if (chk.get(j) >= chk.get(j+1))  return false;
        }
        return true;
    }
    public boolean hasIncreasingSubarrays(List<Integer> nums, int k) {
        if (k==1)  return true;
        int a=0;
        for(int b=k; b<=nums.size()-k; b++)
        {
            if(Str_Inc(nums,a,k) && Str_Inc(nums,b,k))  return true;
            else if(!Str_Inc(nums,a,k) && !Str_Inc(nums,b,k)) a++;
            else if(!Str_Inc(nums,a,k) && b>=a+k) a++;
            else if (!Str_Inc(nums,b,k)) b++;
        }
        return false;
    }
}
**********************************************************************************************************************
                                                        JAVA
CORRECT SOLUTION :
class Solution {
    public boolean hasIncreasingSubarrays(List<Integer> nums, int k) {
        int n = nums.size();
        
        for (int i = 0; i + 2 * k <= n; i++) {
            if (isStrictlyIncreasing(nums, i, i + k - 1) &&
                isStrictlyIncreasing(nums, i + k, i + 2 * k - 1)) {
                return true;
            }
        }
        
        return false;
    }
    
    private boolean isStrictlyIncreasing(List<Integer> nums, int start, int end) {
        for (int i = start; i < end; i++) if (nums.get(i) >= nums.get(i + 1)) return false; 
        
        return true;
    }
}
**********************************************************************************************************************
